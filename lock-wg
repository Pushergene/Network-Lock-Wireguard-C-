#include <iostream>
#include <string>
#include <cstdlib>
#include <cstring>
#include <unistd.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>

using namespace std;

int main(int argc, char* argv[]) {
  if (argc != 2) {
    cerr << "Usage: " << argv[0] << " <VPN server IP address>" << endl;
    return 1;
  }

  // Initialize socket address
  sockaddr_in server_address;
  memset(&server_address, 0, sizeof(server_address));
  server_address.sin_family = AF_INET;
  server_address.sin_addr.s_addr = inet_addr(argv[1]);
  server_address.sin_port = htons(51820);  // WireGuard port number

  // Create a UDP socket
  int sock = socket(AF_INET, SOCK_DGRAM, 0);
  if (sock == -1) {
    cerr << "Error creating socket" << endl;
    return 1;
  }

  // Bind the socket to a local address and port
  sockaddr_in local_address;
  memset(&local_address, 0, sizeof(local_address));
  local_address.sin_family = AF_INET;
  local_address.sin_addr.s_addr = htonl(INADDR_ANY);
  local_address.sin_port = htons(0);  // Any available port
  if (bind(sock, (sockaddr*)&local_address, sizeof(local_address)) == -1) {
    cerr << "Error binding socket" << endl;
    close(sock);
    return 1;
  }

  // Send a dummy packet to the VPN server to test connectivity
  const char* message = "ping";
  int message_length = strlen(message);
  if (sendto(sock, message, message_length, 0, (sockaddr*)&server_address, sizeof(server_address)) == -1) {
    cerr << "Error sending message" << endl;
    close(sock);
    return 1;
  }

  // Wait for a response from the VPN server
  char buffer[1024];
  socklen_t server_address_length = sizeof(server_address);
  int bytes_received = recvfrom(sock, buffer, sizeof(buffer), 0, (sockaddr*)&server_address, &server_address_length);
  if (bytes_received == -1) {
    cerr << "Error receiving message" << endl;
    close(sock);
    return 1;
  }

  // Check if the response is valid
  if (strncmp(buffer, "pong", 4) != 0) {
    cerr << "Invalid response from server" << endl;
    close(sock);
    return 1;
  }

  // If we reach this point, the VPN connection is active
  cout << "VPN connection is active" << endl;

  // Enter an infinite loop to monitor the VPN connection
  while (true) {
    // Send a dummy packet to the VPN server every 10 seconds to maintain the connection
    sleep(10);
    if (sendto(sock, message, message_length, 0, (sockaddr*)&server_address, sizeof(server_address)) == -1) {
      cerr << "Error sending message" << endl;
      close(sock);

      // Disable the network interface to prevent leaks
      system("sudo ifconfig eth0 down");

      return 1;
    }
  }

  // Close the socket and exit
  close(sock);
  return 0;
}
